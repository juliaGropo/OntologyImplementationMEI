package org.ontology.tcc.entities;

import org.ontology.tcc.entities.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: FactoryOntologia<br>
 * @version generated on Sat Sep 15 16:28:32 BRT 2018 by Julia
 */
public class FactoryOntologia implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public FactoryOntologia(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public FactoryOntologia(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Atividade
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Atividade", Atividade.class, DefaultAtividade.class);
    }

    /**
     * Creates an instance of type Atividade.  Modifies the underlying ontology.
     */
    public Atividade createAtividade(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADE, DefaultAtividade.class);
    }

    /**
     * Gets an instance of type Atividade with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Atividade getAtividade(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADE, DefaultAtividade.class);
    }

    /**
     * Gets all instances of Atividade from the ontology.
     */
    public Collection<? extends Atividade> getAllAtividadeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADE, DefaultAtividade.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeCondicao
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeCondicao", AtividadeCondicao.class, DefaultAtividadeCondicao.class);
    }

    /**
     * Creates an instance of type AtividadeCondicao.  Modifies the underlying ontology.
     */
    public AtividadeCondicao createAtividadeCondicao(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADECONDICAO, DefaultAtividadeCondicao.class);
    }

    /**
     * Gets an instance of type AtividadeCondicao with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeCondicao getAtividadeCondicao(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADECONDICAO, DefaultAtividadeCondicao.class);
    }

    /**
     * Gets all instances of AtividadeCondicao from the ontology.
     */
    public Collection<? extends AtividadeCondicao> getAllAtividadeCondicaoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADECONDICAO, DefaultAtividadeCondicao.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeCondicaoFinalidade
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeCondicaoFinalidade", AtividadeCondicaoFinalidade.class, DefaultAtividadeCondicaoFinalidade.class);
    }

    /**
     * Creates an instance of type AtividadeCondicaoFinalidade.  Modifies the underlying ontology.
     */
    public AtividadeCondicaoFinalidade createAtividadeCondicaoFinalidade(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADECONDICAOFINALIDADE, DefaultAtividadeCondicaoFinalidade.class);
    }

    /**
     * Gets an instance of type AtividadeCondicaoFinalidade with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeCondicaoFinalidade getAtividadeCondicaoFinalidade(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADECONDICAOFINALIDADE, DefaultAtividadeCondicaoFinalidade.class);
    }

    /**
     * Gets all instances of AtividadeCondicaoFinalidade from the ontology.
     */
    public Collection<? extends AtividadeCondicaoFinalidade> getAllAtividadeCondicaoFinalidadeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADECONDICAOFINALIDADE, DefaultAtividadeCondicaoFinalidade.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeCondicaoLocal
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeCondicaoLocal", AtividadeCondicaoLocal.class, DefaultAtividadeCondicaoLocal.class);
    }

    /**
     * Creates an instance of type AtividadeCondicaoLocal.  Modifies the underlying ontology.
     */
    public AtividadeCondicaoLocal createAtividadeCondicaoLocal(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADECONDICAOLOCAL, DefaultAtividadeCondicaoLocal.class);
    }

    /**
     * Gets an instance of type AtividadeCondicaoLocal with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeCondicaoLocal getAtividadeCondicaoLocal(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADECONDICAOLOCAL, DefaultAtividadeCondicaoLocal.class);
    }

    /**
     * Gets all instances of AtividadeCondicaoLocal from the ontology.
     */
    public Collection<? extends AtividadeCondicaoLocal> getAllAtividadeCondicaoLocalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADECONDICAOLOCAL, DefaultAtividadeCondicaoLocal.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeCondicaoProduto
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeCondicaoProduto", AtividadeCondicaoProduto.class, DefaultAtividadeCondicaoProduto.class);
    }

    /**
     * Creates an instance of type AtividadeCondicaoProduto.  Modifies the underlying ontology.
     */
    public AtividadeCondicaoProduto createAtividadeCondicaoProduto(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADECONDICAOPRODUTO, DefaultAtividadeCondicaoProduto.class);
    }

    /**
     * Gets an instance of type AtividadeCondicaoProduto with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeCondicaoProduto getAtividadeCondicaoProduto(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADECONDICAOPRODUTO, DefaultAtividadeCondicaoProduto.class);
    }

    /**
     * Gets all instances of AtividadeCondicaoProduto from the ontology.
     */
    public Collection<? extends AtividadeCondicaoProduto> getAllAtividadeCondicaoProdutoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADECONDICAOPRODUTO, DefaultAtividadeCondicaoProduto.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeCondicaoServico
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeCondicaoServico", AtividadeCondicaoServico.class, DefaultAtividadeCondicaoServico.class);
    }

    /**
     * Creates an instance of type AtividadeCondicaoServico.  Modifies the underlying ontology.
     */
    public AtividadeCondicaoServico createAtividadeCondicaoServico(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADECONDICAOSERVICO, DefaultAtividadeCondicaoServico.class);
    }

    /**
     * Gets an instance of type AtividadeCondicaoServico with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeCondicaoServico getAtividadeCondicaoServico(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADECONDICAOSERVICO, DefaultAtividadeCondicaoServico.class);
    }

    /**
     * Gets all instances of AtividadeCondicaoServico from the ontology.
     */
    public Collection<? extends AtividadeCondicaoServico> getAllAtividadeCondicaoServicoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADECONDICAOSERVICO, DefaultAtividadeCondicaoServico.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeElemento
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeElemento", AtividadeElemento.class, DefaultAtividadeElemento.class);
    }

    /**
     * Creates an instance of type AtividadeElemento.  Modifies the underlying ontology.
     */
    public AtividadeElemento createAtividadeElemento(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEELEMENTO, DefaultAtividadeElemento.class);
    }

    /**
     * Gets an instance of type AtividadeElemento with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeElemento getAtividadeElemento(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEELEMENTO, DefaultAtividadeElemento.class);
    }

    /**
     * Gets all instances of AtividadeElemento from the ontology.
     */
    public Collection<? extends AtividadeElemento> getAllAtividadeElementoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEELEMENTO, DefaultAtividadeElemento.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeFinalidade
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeFinalidade", AtividadeFinalidade.class, DefaultAtividadeFinalidade.class);
    }

    /**
     * Creates an instance of type AtividadeFinalidade.  Modifies the underlying ontology.
     */
    public AtividadeFinalidade createAtividadeFinalidade(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEFINALIDADE, DefaultAtividadeFinalidade.class);
    }

    /**
     * Gets an instance of type AtividadeFinalidade with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeFinalidade getAtividadeFinalidade(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEFINALIDADE, DefaultAtividadeFinalidade.class);
    }

    /**
     * Gets all instances of AtividadeFinalidade from the ontology.
     */
    public Collection<? extends AtividadeFinalidade> getAllAtividadeFinalidadeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEFINALIDADE, DefaultAtividadeFinalidade.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeLocal
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeLocal", AtividadeLocal.class, DefaultAtividadeLocal.class);
    }

    /**
     * Creates an instance of type AtividadeLocal.  Modifies the underlying ontology.
     */
    public AtividadeLocal createAtividadeLocal(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADELOCAL, DefaultAtividadeLocal.class);
    }

    /**
     * Gets an instance of type AtividadeLocal with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeLocal getAtividadeLocal(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADELOCAL, DefaultAtividadeLocal.class);
    }

    /**
     * Gets all instances of AtividadeLocal from the ontology.
     */
    public Collection<? extends AtividadeLocal> getAllAtividadeLocalInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADELOCAL, DefaultAtividadeLocal.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeProduto
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeProduto", AtividadeProduto.class, DefaultAtividadeProduto.class);
    }

    /**
     * Creates an instance of type AtividadeProduto.  Modifies the underlying ontology.
     */
    public AtividadeProduto createAtividadeProduto(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEPRODUTO, DefaultAtividadeProduto.class);
    }

    /**
     * Gets an instance of type AtividadeProduto with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeProduto getAtividadeProduto(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEPRODUTO, DefaultAtividadeProduto.class);
    }

    /**
     * Gets all instances of AtividadeProduto from the ontology.
     */
    public Collection<? extends AtividadeProduto> getAllAtividadeProdutoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEPRODUTO, DefaultAtividadeProduto.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisito
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisito", AtividadeRequisito.class, DefaultAtividadeRequisito.class);
    }

    /**
     * Creates an instance of type AtividadeRequisito.  Modifies the underlying ontology.
     */
    public AtividadeRequisito createAtividadeRequisito(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITO, DefaultAtividadeRequisito.class);
    }

    /**
     * Gets an instance of type AtividadeRequisito with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeRequisito getAtividadeRequisito(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITO, DefaultAtividadeRequisito.class);
    }

    /**
     * Gets all instances of AtividadeRequisito from the ontology.
     */
    public Collection<? extends AtividadeRequisito> getAllAtividadeRequisitoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEREQUISITO, DefaultAtividadeRequisito.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoDefinitivo
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoDefinitivo", AtividadeRequisitoDefinitivo.class, DefaultAtividadeRequisitoDefinitivo.class);
    }

    /**
     * Creates an instance of type AtividadeRequisitoDefinitivo.  Modifies the underlying ontology.
     */
    public AtividadeRequisitoDefinitivo createAtividadeRequisitoDefinitivo(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITODEFINITIVO, DefaultAtividadeRequisitoDefinitivo.class);
    }

    /**
     * Gets an instance of type AtividadeRequisitoDefinitivo with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeRequisitoDefinitivo getAtividadeRequisitoDefinitivo(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITODEFINITIVO, DefaultAtividadeRequisitoDefinitivo.class);
    }

    /**
     * Gets all instances of AtividadeRequisitoDefinitivo from the ontology.
     */
    public Collection<? extends AtividadeRequisitoDefinitivo> getAllAtividadeRequisitoDefinitivoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEREQUISITODEFINITIVO, DefaultAtividadeRequisitoDefinitivo.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoFinalidadeDefinitivo
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoFinalidadeDefinitivo", AtividadeRequisitoFinalidadeDefinitivo.class, DefaultAtividadeRequisitoFinalidadeDefinitivo.class);
    }

    /**
     * Creates an instance of type AtividadeRequisitoFinalidadeDefinitivo.  Modifies the underlying ontology.
     */
    public AtividadeRequisitoFinalidadeDefinitivo createAtividadeRequisitoFinalidadeDefinitivo(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOFINALIDADEDEFINITIVO, DefaultAtividadeRequisitoFinalidadeDefinitivo.class);
    }

    /**
     * Gets an instance of type AtividadeRequisitoFinalidadeDefinitivo with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeRequisitoFinalidadeDefinitivo getAtividadeRequisitoFinalidadeDefinitivo(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOFINALIDADEDEFINITIVO, DefaultAtividadeRequisitoFinalidadeDefinitivo.class);
    }

    /**
     * Gets all instances of AtividadeRequisitoFinalidadeDefinitivo from the ontology.
     */
    public Collection<? extends AtividadeRequisitoFinalidadeDefinitivo> getAllAtividadeRequisitoFinalidadeDefinitivoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEREQUISITOFINALIDADEDEFINITIVO, DefaultAtividadeRequisitoFinalidadeDefinitivo.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoFinalidadeVariavel
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoFinalidadeVariavel", AtividadeRequisitoFinalidadeVariavel.class, DefaultAtividadeRequisitoFinalidadeVariavel.class);
    }

    /**
     * Creates an instance of type AtividadeRequisitoFinalidadeVariavel.  Modifies the underlying ontology.
     */
    public AtividadeRequisitoFinalidadeVariavel createAtividadeRequisitoFinalidadeVariavel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOFINALIDADEVARIAVEL, DefaultAtividadeRequisitoFinalidadeVariavel.class);
    }

    /**
     * Gets an instance of type AtividadeRequisitoFinalidadeVariavel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeRequisitoFinalidadeVariavel getAtividadeRequisitoFinalidadeVariavel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOFINALIDADEVARIAVEL, DefaultAtividadeRequisitoFinalidadeVariavel.class);
    }

    /**
     * Gets all instances of AtividadeRequisitoFinalidadeVariavel from the ontology.
     */
    public Collection<? extends AtividadeRequisitoFinalidadeVariavel> getAllAtividadeRequisitoFinalidadeVariavelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEREQUISITOFINALIDADEVARIAVEL, DefaultAtividadeRequisitoFinalidadeVariavel.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoLocalDefinitivo
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoLocalDefinitivo", AtividadeRequisitoLocalDefinitivo.class, DefaultAtividadeRequisitoLocalDefinitivo.class);
    }

    /**
     * Creates an instance of type AtividadeRequisitoLocalDefinitivo.  Modifies the underlying ontology.
     */
    public AtividadeRequisitoLocalDefinitivo createAtividadeRequisitoLocalDefinitivo(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOLOCALDEFINITIVO, DefaultAtividadeRequisitoLocalDefinitivo.class);
    }

    /**
     * Gets an instance of type AtividadeRequisitoLocalDefinitivo with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeRequisitoLocalDefinitivo getAtividadeRequisitoLocalDefinitivo(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOLOCALDEFINITIVO, DefaultAtividadeRequisitoLocalDefinitivo.class);
    }

    /**
     * Gets all instances of AtividadeRequisitoLocalDefinitivo from the ontology.
     */
    public Collection<? extends AtividadeRequisitoLocalDefinitivo> getAllAtividadeRequisitoLocalDefinitivoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEREQUISITOLOCALDEFINITIVO, DefaultAtividadeRequisitoLocalDefinitivo.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoLocalVariavel
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoLocalVariavel", AtividadeRequisitoLocalVariavel.class, DefaultAtividadeRequisitoLocalVariavel.class);
    }

    /**
     * Creates an instance of type AtividadeRequisitoLocalVariavel.  Modifies the underlying ontology.
     */
    public AtividadeRequisitoLocalVariavel createAtividadeRequisitoLocalVariavel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOLOCALVARIAVEL, DefaultAtividadeRequisitoLocalVariavel.class);
    }

    /**
     * Gets an instance of type AtividadeRequisitoLocalVariavel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeRequisitoLocalVariavel getAtividadeRequisitoLocalVariavel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOLOCALVARIAVEL, DefaultAtividadeRequisitoLocalVariavel.class);
    }

    /**
     * Gets all instances of AtividadeRequisitoLocalVariavel from the ontology.
     */
    public Collection<? extends AtividadeRequisitoLocalVariavel> getAllAtividadeRequisitoLocalVariavelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEREQUISITOLOCALVARIAVEL, DefaultAtividadeRequisitoLocalVariavel.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoProdutoDefinitivo
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoProdutoDefinitivo", AtividadeRequisitoProdutoDefinitivo.class, DefaultAtividadeRequisitoProdutoDefinitivo.class);
    }

    /**
     * Creates an instance of type AtividadeRequisitoProdutoDefinitivo.  Modifies the underlying ontology.
     */
    public AtividadeRequisitoProdutoDefinitivo createAtividadeRequisitoProdutoDefinitivo(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOPRODUTODEFINITIVO, DefaultAtividadeRequisitoProdutoDefinitivo.class);
    }

    /**
     * Gets an instance of type AtividadeRequisitoProdutoDefinitivo with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeRequisitoProdutoDefinitivo getAtividadeRequisitoProdutoDefinitivo(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOPRODUTODEFINITIVO, DefaultAtividadeRequisitoProdutoDefinitivo.class);
    }

    /**
     * Gets all instances of AtividadeRequisitoProdutoDefinitivo from the ontology.
     */
    public Collection<? extends AtividadeRequisitoProdutoDefinitivo> getAllAtividadeRequisitoProdutoDefinitivoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEREQUISITOPRODUTODEFINITIVO, DefaultAtividadeRequisitoProdutoDefinitivo.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoProdutoVariavel
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoProdutoVariavel", AtividadeRequisitoProdutoVariavel.class, DefaultAtividadeRequisitoProdutoVariavel.class);
    }

    /**
     * Creates an instance of type AtividadeRequisitoProdutoVariavel.  Modifies the underlying ontology.
     */
    public AtividadeRequisitoProdutoVariavel createAtividadeRequisitoProdutoVariavel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOPRODUTOVARIAVEL, DefaultAtividadeRequisitoProdutoVariavel.class);
    }

    /**
     * Gets an instance of type AtividadeRequisitoProdutoVariavel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeRequisitoProdutoVariavel getAtividadeRequisitoProdutoVariavel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOPRODUTOVARIAVEL, DefaultAtividadeRequisitoProdutoVariavel.class);
    }

    /**
     * Gets all instances of AtividadeRequisitoProdutoVariavel from the ontology.
     */
    public Collection<? extends AtividadeRequisitoProdutoVariavel> getAllAtividadeRequisitoProdutoVariavelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEREQUISITOPRODUTOVARIAVEL, DefaultAtividadeRequisitoProdutoVariavel.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoServicoDefinitivo
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoServicoDefinitivo", AtividadeRequisitoServicoDefinitivo.class, DefaultAtividadeRequisitoServicoDefinitivo.class);
    }

    /**
     * Creates an instance of type AtividadeRequisitoServicoDefinitivo.  Modifies the underlying ontology.
     */
    public AtividadeRequisitoServicoDefinitivo createAtividadeRequisitoServicoDefinitivo(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOSERVICODEFINITIVO, DefaultAtividadeRequisitoServicoDefinitivo.class);
    }

    /**
     * Gets an instance of type AtividadeRequisitoServicoDefinitivo with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeRequisitoServicoDefinitivo getAtividadeRequisitoServicoDefinitivo(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOSERVICODEFINITIVO, DefaultAtividadeRequisitoServicoDefinitivo.class);
    }

    /**
     * Gets all instances of AtividadeRequisitoServicoDefinitivo from the ontology.
     */
    public Collection<? extends AtividadeRequisitoServicoDefinitivo> getAllAtividadeRequisitoServicoDefinitivoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEREQUISITOSERVICODEFINITIVO, DefaultAtividadeRequisitoServicoDefinitivo.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoServicoVariavel
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoServicoVariavel", AtividadeRequisitoServicoVariavel.class, DefaultAtividadeRequisitoServicoVariavel.class);
    }

    /**
     * Creates an instance of type AtividadeRequisitoServicoVariavel.  Modifies the underlying ontology.
     */
    public AtividadeRequisitoServicoVariavel createAtividadeRequisitoServicoVariavel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOSERVICOVARIAVEL, DefaultAtividadeRequisitoServicoVariavel.class);
    }

    /**
     * Gets an instance of type AtividadeRequisitoServicoVariavel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeRequisitoServicoVariavel getAtividadeRequisitoServicoVariavel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOSERVICOVARIAVEL, DefaultAtividadeRequisitoServicoVariavel.class);
    }

    /**
     * Gets all instances of AtividadeRequisitoServicoVariavel from the ontology.
     */
    public Collection<? extends AtividadeRequisitoServicoVariavel> getAllAtividadeRequisitoServicoVariavelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEREQUISITOSERVICOVARIAVEL, DefaultAtividadeRequisitoServicoVariavel.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoVariavel
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeRequisitoVariavel", AtividadeRequisitoVariavel.class, DefaultAtividadeRequisitoVariavel.class);
    }

    /**
     * Creates an instance of type AtividadeRequisitoVariavel.  Modifies the underlying ontology.
     */
    public AtividadeRequisitoVariavel createAtividadeRequisitoVariavel(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOVARIAVEL, DefaultAtividadeRequisitoVariavel.class);
    }

    /**
     * Gets an instance of type AtividadeRequisitoVariavel with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeRequisitoVariavel getAtividadeRequisitoVariavel(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADEREQUISITOVARIAVEL, DefaultAtividadeRequisitoVariavel.class);
    }

    /**
     * Gets all instances of AtividadeRequisitoVariavel from the ontology.
     */
    public Collection<? extends AtividadeRequisitoVariavel> getAllAtividadeRequisitoVariavelInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADEREQUISITOVARIAVEL, DefaultAtividadeRequisitoVariavel.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeServico
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#AtividadeServico", AtividadeServico.class, DefaultAtividadeServico.class);
    }

    /**
     * Creates an instance of type AtividadeServico.  Modifies the underlying ontology.
     */
    public AtividadeServico createAtividadeServico(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADESERVICO, DefaultAtividadeServico.class);
    }

    /**
     * Gets an instance of type AtividadeServico with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public AtividadeServico getAtividadeServico(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ATIVIDADESERVICO, DefaultAtividadeServico.class);
    }

    /**
     * Gets all instances of AtividadeServico from the ontology.
     */
    public Collection<? extends AtividadeServico> getAllAtividadeServicoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ATIVIDADESERVICO, DefaultAtividadeServico.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Classe
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Classe", Classe.class, DefaultClasse.class);
    }

    /**
     * Creates an instance of type Classe.  Modifies the underlying ontology.
     */
    public Classe createClasse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CLASSE, DefaultClasse.class);
    }

    /**
     * Gets an instance of type Classe with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Classe getClasse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CLASSE, DefaultClasse.class);
    }

    /**
     * Gets all instances of Classe from the ontology.
     */
    public Collection<? extends Classe> getAllClasseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CLASSE, DefaultClasse.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#ConjuntoCNAE
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#ConjuntoCNAE", ConjuntoCNAE.class, DefaultConjuntoCNAE.class);
    }

    /**
     * Creates an instance of type ConjuntoCNAE.  Modifies the underlying ontology.
     */
    public ConjuntoCNAE createConjuntoCNAE(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CONJUNTOCNAE, DefaultConjuntoCNAE.class);
    }

    /**
     * Gets an instance of type ConjuntoCNAE with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ConjuntoCNAE getConjuntoCNAE(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CONJUNTOCNAE, DefaultConjuntoCNAE.class);
    }

    /**
     * Gets all instances of ConjuntoCNAE from the ontology.
     */
    public Collection<? extends ConjuntoCNAE> getAllConjuntoCNAEInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CONJUNTOCNAE, DefaultConjuntoCNAE.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Divisao
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Divisao", Divisao.class, DefaultDivisao.class);
    }

    /**
     * Creates an instance of type Divisao.  Modifies the underlying ontology.
     */
    public Divisao createDivisao(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_DIVISAO, DefaultDivisao.class);
    }

    /**
     * Gets an instance of type Divisao with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Divisao getDivisao(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_DIVISAO, DefaultDivisao.class);
    }

    /**
     * Gets all instances of Divisao from the ontology.
     */
    public Collection<? extends Divisao> getAllDivisaoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_DIVISAO, DefaultDivisao.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Grupo
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Grupo", Grupo.class, DefaultGrupo.class);
    }

    /**
     * Creates an instance of type Grupo.  Modifies the underlying ontology.
     */
    public Grupo createGrupo(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GRUPO, DefaultGrupo.class);
    }

    /**
     * Gets an instance of type Grupo with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Grupo getGrupo(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GRUPO, DefaultGrupo.class);
    }

    /**
     * Gets all instances of Grupo from the ontology.
     */
    public Collection<? extends Grupo> getAllGrupoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GRUPO, DefaultGrupo.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Ocupacao
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Ocupacao", Ocupacao.class, DefaultOcupacao.class);
    }

    /**
     * Creates an instance of type Ocupacao.  Modifies the underlying ontology.
     */
    public Ocupacao createOcupacao(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_OCUPACAO, DefaultOcupacao.class);
    }

    /**
     * Gets an instance of type Ocupacao with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Ocupacao getOcupacao(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_OCUPACAO, DefaultOcupacao.class);
    }

    /**
     * Gets all instances of Ocupacao from the ontology.
     */
    public Collection<? extends Ocupacao> getAllOcupacaoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_OCUPACAO, DefaultOcupacao.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Secao
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Secao", Secao.class, DefaultSecao.class);
    }

    /**
     * Creates an instance of type Secao.  Modifies the underlying ontology.
     */
    public Secao createSecao(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SECAO, DefaultSecao.class);
    }

    /**
     * Gets an instance of type Secao with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Secao getSecao(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SECAO, DefaultSecao.class);
    }

    /**
     * Gets all instances of Secao from the ontology.
     */
    public Collection<? extends Secao> getAllSecaoInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SECAO, DefaultSecao.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Subclasse
     */

    {
        javaMapping.add("http://www.semanticweb.org/gabriel/ontologies/2017/8/mei#Subclasse", Subclasse.class, DefaultSubclasse.class);
    }

    /**
     * Creates an instance of type Subclasse.  Modifies the underlying ontology.
     */
    public Subclasse createSubclasse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SUBCLASSE, DefaultSubclasse.class);
    }

    /**
     * Gets an instance of type Subclasse with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Subclasse getSubclasse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SUBCLASSE, DefaultSubclasse.class);
    }

    /**
     * Gets all instances of Subclasse from the ontology.
     */
    public Collection<? extends Subclasse> getAllSubclasseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SUBCLASSE, DefaultSubclasse.class);
    }


}
